{"version":3,"sources":["../../src/cli/configure-commands.ts","../../src/cli/command/create-command/create-command.ts","../../src/cli/command/transform/inject-transform-command.ts","../../src/cli/auto-configure-commands.ts"],"sourcesContent":["import {Command} from \"commander\";\nimport {injectTransformCommand} from \"./command/transform/inject-transform-command.js\";\nimport type {InjectCommandOptions} from \"./command/inject-command/inject-command-options.js\";\n\nexport interface ConfigureCommandsOptions extends Omit<InjectCommandOptions, \"program\"> {\n\tcommandLoaders: ((options: InjectCommandOptions) => void)[];\n\targs: string[];\n\tkeepAliveOnError: boolean;\n}\n\nexport function configureCommands({\n\tkeepAliveOnError = false,\n\tcommandLoaders = [injectTransformCommand],\n\targs = [...process.argv],\n\t...injectCommandOptions\n}: Partial<ConfigureCommandsOptions> = {}): void {\n\tconst program = new Command();\n\n\tif (keepAliveOnError) {\n\t\tprogram.exitOverride();\n\t}\n\n\tfor (const commandLoader of commandLoaders) {\n\t\tcommandLoader({...injectCommandOptions, program});\n\t}\n\n\tif (args[2] !== \"transform\") {\n\t\targs.splice(2, 0, \"transform\");\n\t}\n\tprogram.parse(args);\n}\n","import type {Command} from \"commander\";\nimport type {CommandAction, CommandActionOptions, CommandOptionType, CreateCommandOptions} from \"./create-command-options.js\";\n\n/**\n * Coerces the given option value into an acceptable data type\n */\nfunction coerceOptionValue(type: CommandOptionType, value: unknown): typeof type extends \"boolean\" ? boolean : typeof type extends \"number\" ? number : string {\n\tswitch (type) {\n\t\tcase \"string\":\n\t\t\tif (value === null) return \"null\";\n\t\t\telse if (value === undefined) return \"undefined\";\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-base-to-string\n\t\t\treturn String(value);\n\n\t\tcase \"number\":\n\t\t\tif (typeof value === \"number\") return value as unknown as string;\n\t\t\telse if (value === true) return 1 as unknown as string;\n\t\t\telse if (value === false) return 0 as unknown as string;\n\t\t\treturn parseFloat(value as string) as unknown as string;\n\t\tcase \"boolean\":\n\t\t\tif (value === \"true\" || value === \"\" || value === \"1\" || value === 1) return true as unknown as string;\n\t\t\telse if (value === \"false\" || value === \"0\" || value === 0) return false as unknown as string;\n\t\t\treturn Boolean(value) as unknown as string;\n\t}\n}\n\n/**\n * Formats the given option flags\n */\nfunction formatOptionFlags(shortHand: string | undefined, longHand: string): string {\n\tconst formattedLongHand = `${longHand} [arg]`;\n\treturn shortHand != null ? `-${shortHand}, --${formattedLongHand}` : `--${formattedLongHand}`;\n}\n\n/**\n * Formats the given command name, along with its arguments\n */\nfunction formatCommandNameWithArgs<T extends CreateCommandOptions>(options: T): string {\n\tconst formattedArgs = Object.entries(options.args)\n\t\t.map(([argName, {type, required}]) => {\n\t\t\tconst left = required ? `<` : `[`;\n\t\t\tconst right = required ? \">\" : `]`;\n\t\t\tif (type === \"string[]\") {\n\t\t\t\treturn `${left}${argName}...${right}`;\n\t\t\t} else {\n\t\t\t\treturn `${left}${argName}${right}`;\n\t\t\t}\n\t\t})\n\t\t.join(\" \");\n\treturn `${options.name} ${formattedArgs}`;\n}\n\n/**\n * Creates a new command\n */\nexport function createCommand<T extends CreateCommandOptions>(program: Command, options: T, action: CommandAction<T>): void {\n\t// Add the command to the program\n\tconst result = program\n\t\t.command(formatCommandNameWithArgs(options), {\n\t\t\tisDefault: options.isDefault\n\t\t})\n\t\t.description(options.description);\n\n\t// Add options to the command\n\tObject.entries(options.options).forEach(([longhand, {shortHand, description, type, defaultValue}]) => {\n\t\tresult.option(formatOptionFlags(shortHand, longhand), description, coerceOptionValue.bind(null, type), defaultValue);\n\t});\n\n\t// Add the action to the command\n\tresult.action((...args: unknown[]) => {\n\t\tconst actionOptions = {} as CommandActionOptions<T>;\n\n\t\tlet offset = 0;\n\n\t\tfor (const key of Object.keys(options.args)) {\n\t\t\tactionOptions[key as keyof CommandActionOptions<T>] = args[offset++] as never;\n\t\t}\n\n\t\tObject.assign(actionOptions, args[offset]);\n\n\t\t// Invoke the action\n\t\taction(actionOptions);\n\t});\n}\n","import {createCommand} from \"../create-command/create-command.js\";\nimport type {InjectCommandOptions} from \"../inject-command/inject-command-options.js\";\nimport {LogLevelKind} from \"../../../shared/logger/log-level-kind.js\";\nimport {Logger} from \"../../../shared/logger/logger.js\";\nimport {createTransformTaskOptions} from \"../../../shared/task/create-transform-task-options.js\";\nimport {transformTask} from \"../../task/transform/transform-task.js\";\n\nexport function injectTransformCommand(options: InjectCommandOptions): void {\n\tcreateCommand(\n\t\toptions.program,\n\t\t{\n\t\t\tname: \"transform\",\n\t\t\tdescription: `Transforms CJS to ESM modules based on the input glob`,\n\t\t\tisDefault: true,\n\t\t\targs: {\n\t\t\t\tinput: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdescription: \"A glob for all the files that should be transformed\"\n\t\t\t\t},\n\t\t\t\toutDir: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\trequired: false,\n\t\t\t\t\tdescription: `Optionally, the directory to write the transformed files to. Defaults to overwriting the matched input files`\n\t\t\t\t}\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tdebug: {\n\t\t\t\t\tshortHand: \"d\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdescription: \"Whether to print debug information\"\n\t\t\t\t},\n\t\t\t\tverbose: {\n\t\t\t\t\tshortHand: \"v\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdescription: \"Whether to print verbose information\"\n\t\t\t\t},\n\t\t\t\tsilent: {\n\t\t\t\t\tshortHand: \"s\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdescription: \"Whether to not print anything\"\n\t\t\t\t},\n\t\t\t\tcwd: {\n\t\t\t\t\tshortHand: \"c\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: `Optionally which directory to use as the current working directory`\n\t\t\t\t},\n\t\t\t\t\"preserve-module-specifiers\": {\n\t\t\t\t\tshortHand: \"p\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdefaultValue: \"external\",\n\t\t\t\t\tdescription: `Determines whether or not module specifiers are preserved. Possible values are: \"external\", \"internal\", \"always\", and \"never\"`\n\t\t\t\t},\n\t\t\t\t\"import-attributes\": {\n\t\t\t\t\tshortHand: \"a\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdefaultValue: true,\n\t\t\t\t\tdescription: `Determines whether or not Import Attributes are included where they are relevant. Possible values are: true and false`\n\t\t\t\t},\n\t\t\t\tdry: {\n\t\t\t\t\tshortHand: \"m\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdescription: \"If true, no files will be written to disk\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync args => {\n\t\t\tconst logger = new Logger(args.debug ? LogLevelKind.DEBUG : args.verbose ? LogLevelKind.VERBOSE : args.silent ? LogLevelKind.NONE : LogLevelKind.INFO);\n\n\t\t\t// Inform about the log level (if applicable)\n\t\t\tif (logger.logLevel === LogLevelKind.VERBOSE) {\n\t\t\t\tlogger.verbose(`Logging mode: VERBOSE`);\n\t\t\t} else if (logger.logLevel === LogLevelKind.DEBUG) {\n\t\t\t\tlogger.debug(`Logging mode: DEBUG`);\n\t\t\t}\n\n\t\t\tconst taskOptions = createTransformTaskOptions({\n\t\t\t\t...options,\n\t\t\t\t...args,\n\t\t\t\tlogger,\n\t\t\t\twrite: !args.dry\n\t\t\t});\n\n\t\t\t// Execute it\n\t\t\tawait transformTask(taskOptions);\n\t\t}\n\t);\n}\n","import {configureCommands} from \"./configure-commands.js\";\n\nconfigureCommands();\n"],"mappings":"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","names":[]}